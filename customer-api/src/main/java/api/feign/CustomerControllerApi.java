/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package api.feign;

import api.model.CustomerRequestDto;
import api.model.CustomerResponseDto;
import feign.Request;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jdk.nashorn.internal.runtime.options.Options;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.net.URI;
import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-04-10T16:07:56.390+02:00[Europe/Paris]")
@Validated
@Tag(name = "CustomerController", description = "the CustomerController API")
public interface CustomerControllerApi {

    /**
     * POST /api/customers
     *
     * @param customerRequestDto  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createCustomer",
        tags = { "customer-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  CustomerResponseDto.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/customers",
        produces = "*/*",
        consumes = "application/json"
    )
    ResponseEntity<CustomerResponseDto> createCustomer(URI uriBase,
        @Parameter(name = "CustomerRequestDto", description = "", required = true, schema = @Schema(description = "")) @Valid @RequestBody CustomerRequestDto customerRequestDto
    );


    /**
     * GET /api/customers/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getCustustomer",
        tags = { "customer-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  CustomerResponseDto.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/customers/{id}",
        produces = "*/*"
    )
    ResponseEntity<CustomerResponseDto> getCustustomer(URI uriBase,
                                                       @Parameter(name = "id", description = ""
                                                               , required = true, schema = @Schema(description = "")) @PathVariable("id") String id);


    /**
     * GET /api/customers
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getListCustomers",
        tags = { "customer-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  CustomerResponseDto.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/customers",
        produces = "*/*"
    )
    ResponseEntity<List<CustomerResponseDto>> getListCustomers(URI uriBase);

}
